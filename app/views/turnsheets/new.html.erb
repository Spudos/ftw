<div id="form-body">
  <%= form_with(url: turnsheets_path, method: :post, local: false) do |form| %>
    <div id="header-form" class="shown start">
      <%= render "header", turnsheet: @turnsheet, form: form %>
    </div>

    <div id="club-actions-form" class="hidden">
      <%= render "club", turnsheet: @turnsheet, form: form %>
    </div>

    <div id="coaching-form" class="hidden">
    <%= render "player_training", turnsheet: @turnsheet, form: form %>
    </div>

    <div id="player-actions-form" class="hidden">
    <%= render "player_fitness", turnsheet: @turnsheet, form: form %>
    <%= render "player_actions", turnsheet: @turnsheet, form: form %>
    </div>

    <div id="match-actions-form" class="hidden">
      <%= render "team", turnsheet: @turnsheet, form: form %>
      <%= render "tactics", turnsheet: @turnsheet, form: form %>
    </div>

    <div id="transfer-form" class="hidden">
      <%= render "transfers", turnsheet: @turnsheet, form: form %>
    </div>

    <div id="messages-form" class="hidden end">
      <%= render "articles", turnsheet: @turnsheet, form: form %>
      <%= render "messaging", turnsheet: @turnsheet, form: form %>
      <%= form.submit 'Save Turnsheet', class: 'btn btn-sm btn-danger' %>
    </div>
  <% end %>
</div>

<hr>
<div id="form_navigation" class="col-md-12 align-top d-flex align-items-center justify-content-center">
  <button id="back" class="btn btn-sm btn-primary">Back</button>
  <button id="next" class="btn btn-sm btn-primary">Next</button>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
//----------------------------------------- data from turnsheets controller
  const club = <%= @club.to_json.html_safe %>;
  const squadListing = <%= @selection.to_json.html_safe  %>;


//----------------------------------------- navigation
  const navigationButtons = document.querySelectorAll('#form_navigation button');

  navigationButtons.forEach(function(button) {
    button.addEventListener('click', function(event) {
      event.preventDefault();
      handleNavigationButtonClick(button.id);
      window.scrollTo(0, 0);
    });
  });

  function handleNavigationButtonClick(buttonId) {
    const shownDiv = document.querySelector('div.shown');
    if (buttonId === 'back') {
      if (!shownDiv.classList.contains('start')) {
        if (shownDiv.previousElementSibling) {
            shownDiv.classList.remove('shown');
            shownDiv.classList.add('hidden');
            shownDiv.previousElementSibling.classList.remove('hidden');
            shownDiv.previousElementSibling.classList.add('shown');
        };
      };
    } else if (buttonId === 'next') {
      if (!shownDiv.classList.contains('end')) {
        if (shownDiv.nextElementSibling) {
            shownDiv.classList.remove('shown');
            shownDiv.classList.add('hidden');
            shownDiv.nextElementSibling.classList.remove('hidden');
            shownDiv.nextElementSibling.classList.add('shown');
        };
      };
    };
  };


//----------------------------------------- stand selection buttons on club view
  const stadiumButtons = document.querySelectorAll('#stand_navigation button');
  const name = document.querySelector('#name');
  const capacity = document.querySelector('#capacity');
  const condition = document.querySelector('#condition');

  stadiumButtons.forEach(function(button) {
    button.addEventListener('click', function(event) {
      event.preventDefault();
      handleStadiumButtonClick(button);
    });
  });

  function handleStadiumButtonClick(button) {
    const buttonId = button.id;
    const standName = club[`stand_${buttonId}_name`];
    const standCapacity = club[`stand_${buttonId}_capacity`];
    const standCondition = club[`stand_${buttonId}_condition`];

    stadiumButtons.forEach(function(btn) {
        btn.classList.remove('btn-success');
        btn.classList.add('btn-outline-primary');
    });

    button.classList.remove('btn-outline-primary');
    button.classList.add('btn-success');

    if (standName && standCapacity && standCondition) {
        name.innerText = standName;
        capacity.innerText = standCapacity;
        condition.innerText = standCondition; 
    } else {
        name.innerText = "Unknown Stand";
        capacity.innerText = "N/A";
        condition.innerText = "N/A";
    };
  };


//----------------------------------------- add listners for club improvments
  function addEventListeners(buttons) {
    buttons.forEach(button => {
      button.addEventListener('click', function(event) {
        event.preventDefault();
        handleButtonClick(button, buttons);
      });
    });
  }

//----------------------------------------- handle button click for club improvments
  function handleButtonClick(button, buttons) {
    const buttonId = button.id;
    
    if (button.classList.contains('btn-success')) {
        button.classList.add('btn-outline-primary');
        button.classList.remove('btn-success');
    } else {
        buttons.forEach(function(btn) {
            btn.classList.add('btn-outline-primary');
            btn.classList.remove('btn-success');
        });

        button.classList.add('btn-success');
    }
  }

//----------------------------------------- button criteria for club improvments
  const standCapacityButtons = document.querySelectorAll('#stand_capacity button');
  const standConditionButtons = document.querySelectorAll('#stand_condition button');
  const coachSelectionButtons = document.querySelectorAll('#coach_selection button');
  const propertySelectionButtons = document.querySelectorAll('#property_selection button');

  addEventListeners(standCapacityButtons);
  addEventListeners(standConditionButtons);
  addEventListeners(coachSelectionButtons);
  addEventListeners(propertySelectionButtons);


//----------------------------------------- player training
  const coachingArray = []; 
  const playerTrainingRows = document.querySelectorAll('tr[class]');

  //------ gets player data and row and passes it into initializeSkillCells
  playerTrainingRows.forEach(function(row) {
    const playerIdCell = row.querySelector('td.player_id');
    const playerId = playerIdCell ? playerIdCell.innerHTML : null;

    const player = squadListing.find(function(player) {
      return player.id == playerId;
    });

    if (player) {
      initializeSkillCells(row, player);
    };
  });

  //------ styles a skill based on coachability and adds event listener to all skills
  function initializeSkillCells(row, player) {
    const skillCells = row.querySelectorAll('td.skill'); 
    const position = row.classList[0];
    const staffKey = 'staff_' + position;

    skillCells.forEach(function(cell) {
      if (Number(cell.innerHTML) >= club[staffKey]) {
        cell.classList.add('inferior-coach');
      };

      const potentialCheck = 'potential_' + cell.id + '_coached';

      if (player[potentialCheck] === true) {
        cell.classList.add('potential-coached');
      };

      cell.addEventListener('click', function() {
        handleSkillCellClick(cell);
      });
    });
  };

  //------ if a skill is coachable passes player and skill into buildCoachingArray
  function handleSkillCellClick(cell) {
    const playerIdCell = cell.closest('tr').querySelector('td.player_id');
    const playerId = playerIdCell ? playerIdCell.innerHTML : 'Unknown Player ID';
    const skillId = cell.id;
    const classesToCheck = ['inferior-coach', 'potential-coached'];

    if (!classesToCheck.some(className => cell.classList.contains(className))) {
      buildCoachingArray(playerId, skillId)
    } else {
      alert('You cannot coach this skill');
    };
  };

  //------ builds the training array for one gkp, dfc, mid, att
  function buildCoachingArray(playerId, skillId) {
    const player = squadListing.find(function(player) {
      return player.id == playerId;
    });

    const playerPosition = player.position;

    const index = coachingArray.findIndex(player => player.position === playerPosition);

    if (index !== -1) {
        coachingArray.splice(index, 1); 
        coachingArray.push({ playerId: playerId, position: playerPosition, skillId: skillId });
    } else {
        coachingArray.push({ playerId: playerId, position: playerPosition, skillId: skillId });
    };

    styleSkillsToBeCoached();
  };

  //------ styles the skills to be coached
  function styleSkillsToBeCoached() {
    console.log(coachingArray);
    const allSkillCells = document.querySelectorAll('td.skill');

    allSkillCells.forEach(function(cell) {
      cell.classList.remove('coached');
    });

    coachingArray.forEach(function(player) {
      const playerRow = Array.from(document.querySelectorAll('tr')).find(row => {
        const firstCell = row.querySelector('td');
        return firstCell && firstCell.textContent.trim() === player.playerId;
      });
      const playerSkillCell = playerRow.querySelector(`td#${player.skillId}`);
      playerSkillCell.classList.add('coached');
    });
  };
});
</script>



